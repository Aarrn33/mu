"""
Contains definitions for the bottle web framework related APIs so they can be
used in the editor for autocomplete and call tips.

Copyright (c) 2015-2019 Nicholas H.Tollervey and others (see the AUTHORS file).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""


BOTTLE_APIS = [
    _('AppStack() \nA stack-like list. Calling it returns the head of the stack.\n\n'),
    _('AppStack.new_app(value=None) \nAdd a new Bottle instance to the stack\n'),
    _('AppStack.pop() \nReturn the current default application and remove it from the stack.\n'),
    _('AppStack.push(value=None) \nAdd a new Bottle instance to the stack\n'),
    _('BaseRequest(environ=None) \nA wrapper for WSGI environment dictionaries that adds a lot of\nconvenient access methods and properties. Most of them are read-only.\n\nAdding new attributes to a request actually adds them to the environ\ndictionary (as ‘bottle.request.ext.<name>’). This is the recommended\nway to store and access request-specific data.\n\n'),
    _('BaseRequest.GET() \nAn alias for query.\n'),
    _('BaseRequest.MEMFILE_MAX() \nMaximum size of memory buffer for body in bytes.\n'),
    _('BaseRequest.POST() \nThe values of forms and files combined into a single\nFormsDict. Values are either strings (form values) or\ninstances of cgi.FieldStorage (file uploads).\n'),
    _('BaseRequest.app() \nBottle application handling this request.\n'),
    _('BaseRequest.auth() \nHTTP authentication data as a (user, password) tuple. This\nimplementation currently supports basic (not digest) authentication\nonly. If the authentication happened at a higher level (e.g. in the\nfront web-server or a middleware), the password field is None, but\nthe user field is looked up from the REMOTE_USER environ\nvariable. On any errors, None is returned.\n'),
    _('BaseRequest.body() \nThe HTTP request body as a seek-able file-like object. Depending on\nMEMFILE_MAX, this is either a temporary file or a\nio.BytesIO instance. Accessing this property for the first\ntime reads and replaces the wsgi.input environ variable.\nSubsequent accesses just do a seek(0) on the file object.\n'),
    _('BaseRequest.chunked() \nTrue if Chunked transfer encoding was.\n'),
    _('BaseRequest.content_length() \nThe request body length as an integer. The client is responsible to\nset this header. Otherwise, the real length of the body is unknown\nand -1 is returned. In this case, body will be empty.\n'),
    _('BaseRequest.content_type() \nThe Content-Type header as a lowercase-string (default: empty).\n'),
    _('BaseRequest.cookies() \nCookies parsed into a FormsDict. Signed cookies are NOT\ndecoded. Use get_cookie() if you expect signed cookies.\n'),
    _('BaseRequest.copy() \nReturn a new Request with a shallow environ copy.\n'),
    _('BaseRequest.environ() \nThe wrapped WSGI environ dictionary. This is the only real attribute.\nAll other attributes actually are read-only properties.\n'),
    _('BaseRequest.files() \nFile uploads parsed from multipart/form-data encoded POST or PUT\nrequest body. The values are instances of FileUpload.\n'),
    _('BaseRequest.forms() \nForm values parsed from an url-encoded or multipart/form-data\nencoded POST or PUT request body. The result is returned as a\nFormsDict. All keys and values are strings. File uploads\nare stored separately in files.\n'),
    _('BaseRequest.fullpath() \nRequest path including script_name (if present).\n'),
    _('BaseRequest.get_cookie(key, default=None, secret=None, digestmod=&lt;built-in function openssl_sha256&gt;) \nReturn the content of a cookie. To read a Signed Cookie, the\nsecret must match the one used to create the cookie (see\nBaseResponse.set_cookie()). If anything goes wrong (missing\ncookie or wrong signature), return a default value.\n'),
    _('BaseRequest.get_header(name, default=None) \nReturn the value of a request header, or a given default value.\n'),
    _('BaseRequest.headers() \nA WSGIHeaderDict that provides case-insensitive access to\nHTTP request headers.\n'),
    _('BaseRequest.is_ajax() \nAlias for is_xhr. “Ajax” is not the right term.\n'),
    _('BaseRequest.is_xhr() \nTrue if the request was triggered by a XMLHttpRequest. This only\nworks with JavaScript libraries that support the X-Requested-With\nheader (most of the popular libraries do).\n'),
    _('BaseRequest.json() \nIf the Content-Type header is application/json or\napplication/json-rpc, this property holds the parsed content\nof the request body. Only requests smaller than MEMFILE_MAX\nare processed to avoid memory exhaustion.\nInvalid JSON raises a 400 error response.\n'),
    _('BaseRequest.method() \nThe REQUEST_METHOD value as an uppercase string.\n'),
    _('BaseRequest.params() \nA FormsDict with the combined values of query and\nforms. File uploads are stored in files.\n'),
    _('BaseRequest.path() \nThe value of PATH_INFO with exactly one prefixed slash (to fix\nbroken clients and avoid the “empty path” edge case).\n'),
    _('BaseRequest.path_shift(shift=1) \n\nShift path segments from path to script_name and\nvice versa.\n\n\n\n\n\nParameters:shift -- The number of path segments to shift. May be negative\nto change the shift direction. (default: 1)\n\n\n\n'),
    _('BaseRequest.query() \nThe query_string parsed into a FormsDict. These\nvalues are sometimes called “URL arguments” or “GET parameters”, but\nnot to be confused with “URL wildcards” as they are provided by the\nRouter.\n'),
    _('BaseRequest.query_string() \nThe raw query part of the URL (everything in between ?\nand #) as a string.\n'),
    _('BaseRequest.remote_addr() \nThe client IP as a string. Note that this information can be forged\nby malicious clients.\n'),
    _('BaseRequest.remote_route() \nA list of all IPs that were involved in this request, starting with\nthe client IP and followed by zero or more proxies. This does only\nwork if all proxies support the `X-Forwarded-For header. Note\nthat this information can be forged by malicious clients.\n'),
    _('BaseRequest.route() \nThe bottle Route object that matches this request.\n'),
    _('BaseRequest.script_name() \nThe initial portion of the URL’s path that was removed by a higher\nlevel (server or routing middleware) before the application was\ncalled. This script path is returned with leading and tailing\nslashes.\n'),
    _('BaseRequest.url() \nThe full request URI including hostname and scheme. If your app\nlives behind a reverse proxy or load balancer and you get confusing\nresults, make sure that the X-Forwarded-Host header is set\ncorrectly.\n'),
    _('BaseRequest.url_args() \nThe arguments extracted from the URL.\n'),
    _('BaseRequest.urlparts() \nThe url string as an urlparse.SplitResult tuple.\nThe tuple contains (scheme, host, path, query_string and fragment),\nbut the fragment is always empty because it is not visible to the\nserver.\n'),
    _("BaseResponse(body='', status=None, headers=None, **more_headers) \nStorage class for a response body as well as headers and cookies.\n\nThis class does support dict-like case-insensitive item-access to\nheaders, but is NOT a dict. Most notably, iterating over a response\nyields parts of the body and not the headers.\n\n\nParameters:\nbody -- The response body as one of the supported types.\nstatus -- Either an HTTP status code (e.g. 200) or a status line\nincluding the reason phrase (e.g. ‘200 OK’).\nheaders -- A dictionary or a list of name-value pairs."),
    _('BaseResponse.add_header(name, value) \nAdd an additional response header, not removing duplicates.\n'),
    _('BaseResponse.charset() \nReturn the charset specified in the content-type header (default: utf8).\n'),
    _('BaseResponse.content_length() \nCurrent value of the ‘Content-Length’ header.\n'),
    _('BaseResponse.content_type() \nCurrent value of the ‘Content-Type’ header.\n'),
    _('BaseResponse.copy(cls=None) \nReturns a copy of self.\n'),
    _('BaseResponse.delete_cookie(key, **kwargs) \nDelete a cookie. Be sure to use the same domain and path\nsettings as used to create the cookie.\n'),
    _('BaseResponse.expires() \nCurrent value of the ‘Expires’ header.\n'),
    _('BaseResponse.get_header(name, default=None) \nReturn the value of a previously defined header. If there is no\nheader with that name, return a default value.\n'),
    _('BaseResponse.headerlist() \nWSGI conform list of (header, value) tuples.\n'),
    _('BaseResponse.headers() \nAn instance of HeaderDict, a case-insensitive dict-like\nview on the response headers.\n'),
    _('BaseResponse.iter_headers() \nYield (header, value) tuples, skipping headers that are not\nallowed with the current response status code.\n'),
    _('BaseResponse.set_cookie(name, value, secret=None, digestmod=&lt;built-in function openssl_sha256&gt;, **options) \nCreate a new cookie or replace an old one. If the secret parameter is\nset, create a Signed Cookie (described below).\n\n\n\n\nParameters:\nname -- the name of the cookie.\nvalue -- the value of the cookie.\nsecret -- a signature key required for signed cookies.\n\n\n\n\n\nAdditionally, this method accepts all RFC 2109 attributes that are\nsupported by cookie.Morsel, including:\n\n\n\n\nParameters:\nmaxage -- maximum age in seconds. (default: None)\nexpires -- a datetime object or UNIX timestamp. (default: None)\ndomain -- the domain that is allowed to read the cookie.\n(default: current domain)\npath -- limits the cookie to a given path (default: current path)\nsecure -- limit the cookie to HTTPS connections (default: off).\nhttponly -- prevents client-side javascript to read this cookie\n(default: off, requires Python 2.6 or newer).\nsamesite -- disables third-party use for a cookie.\nAllowed attributes: lax and strict.\nIn strict mode the cookie will never be sent.\nIn lax mode the cookie is only sent with a top-level GET request.\n\n\n\n\n\nIf neither expires nor maxage is set (default), the cookie will\nexpire at the end of the browser session (as soon as the browser\nwindow is closed).\nSigned cookies may store any pickle-able object and are\ncryptographically signed to prevent manipulation. Keep in mind that\ncookies are limited to 4kb in most browsers.\nWarning: Pickle is a potentially dangerous format. If an attacker\ngains access to the secret key, he could forge cookies that execute\ncode on server side if unpickeld. Using pickle is discouraged and\nsupport for it will be removed in later versions of bottle.\nWarning: Signed cookies are not encrypted (the client can still see\nthe content) and not copy-protected (the client can restore an old\ncookie). The main intention is to make pickling and unpickling\nsave, not to store secret information at client side.\n'),
    _('BaseResponse.set_header(name, value) \nCreate a new response header, replacing any previously defined\nheaders with the same name.\n'),
    _('BaseResponse.status() \nA writeable property to change the HTTP response status. It accepts\neither a numeric code (100-999) or a string with a custom reason\nphrase (e.g. “404 Brain not found”). Both status_line and\nstatus_code are updated accordingly. The return value is\nalways a status string.\n'),
    _('BaseResponse.status_code() \nThe HTTP status code as an integer (e.g. 404).\n'),
    _('BaseResponse.status_line() \nThe HTTP status line as a string (e.g. 404 Not Found).\n'),
    _("BaseTemplate(source=None, name=None, lookup=None, encoding='utf8', **settings) \nBase class and minimal API for template adapters\n\n"),
    _('Bottle(**kwargs) \nEach Bottle object represents a single, distinct web application and\nconsists of routes, callbacks, plugins, resources and configuration.\nInstances are callable WSGI applications.\n\n\nParameters:catchall -- If true (default), handle all exceptions. Turn off to\nlet debugging middleware handle exceptions.'),
    _('Bottle.add_hook(name, func) \nAttach a callback to a hook. Three hooks are currently implemented:\n\nbefore_request\nExecuted once before each request. The request context is\navailable, but no routing has happened yet.\nafter_request\nExecuted once after each request regardless of its outcome.\napp_reset\nCalled whenever Bottle.reset() is called.\n\n'),
    _('Bottle.add_route(route) \nAdd a route object, but do not change the Route.app\nattribute.\n'),
    _('Bottle.catchall() \nIf true, most exceptions are caught and returned as HTTPError\n'),
    _('Bottle.close() \nClose the application and all installed plugins.\n'),
    _('Bottle.config() \nA ConfigDict for app specific configuration.\n'),
    _("Bottle.delete(path=None, method='DELETE', **options) \nEquals route() with a DELETE method parameter.\n"),
    _("Bottle.error(code=500, callback=None) \nRegister an output handler for a HTTP error code. Can\nbe used as a decorator or called directly\ndef error_handler_500(error):\n    return 'error_handler_500'\n\napp.error(code=500, callback=error_handler_500)\n\n@app.error(404)\ndef error_handler_404(error):\n    return 'error_handler_404'\n\n\n"),
    _("Bottle.get(path=None, method='GET', **options) \nEquals route().\n"),
    _('Bottle.get_url(routename, **kargs) \nReturn a string that matches a named route\n'),
    _('Bottle.hook(name) \nReturn a decorator that attaches a callback to a hook. See\nadd_hook() for details.\n'),
    _('Bottle.install(plugin) \nAdd a plugin to the list of plugins and prepare it for being\napplied to all routes of this application. A plugin may be a simple\ndecorator or an object that implements the Plugin API.\n'),
    _('Bottle.match(environ) \nSearch for a matching route and return a (Route , urlargs)\ntuple. The second value is a dictionary with parameters extracted\nfrom the URL. Raise HTTPError (404/405) on a non-match.\n'),
    _('Bottle.merge(routes) \nMerge the routes of another Bottle application or a list of\nRoute objects into this application. The routes keep their\n‘owner’, meaning that the Route.app attribute is not\nchanged.\n'),
    _("Bottle.mount(prefix, app, **options) \nMount an application (Bottle or plain WSGI) to a specific\nURL prefix. Example:\nparent_app.mount('/prefix/', child_app)\n\n\n\n\n\n\nParameters:\nprefix -- path prefix or mount-point.\napp -- an instance of Bottle or a WSGI application.\n\n\n\n\n\nPlugins from the parent application are not applied to the routes\nof the mounted child application. If you need plugins in the child\napplication, install them separately.\nWhile it is possible to use path wildcards within the prefix path\n(Bottle childs only), it is highly discouraged.\nThe prefix path must end with a slash. If you want to access the\nroot of the child application via /prefix in addition to\n/prefix/, consider adding a route with a 307 redirect to the\nparent application.\n"),
    _("Bottle.patch(path=None, method='PATCH', **options) \nEquals route() with a PATCH method parameter.\n"),
    _("Bottle.post(path=None, method='POST', **options) \nEquals route() with a POST method parameter.\n"),
    _("Bottle.put(path=None, method='PUT', **options) \nEquals route() with a PUT method parameter.\n"),
    _('Bottle.remove_hook(name, func) \nRemove a callback from a hook.\n'),
    _('Bottle.reset(route=None) \nReset all routes (force plugins to be re-applied) and clear all\ncaches. If an ID or route object is given, only that specific route\nis affected.\n'),
    _('Bottle.resources() \nA ResourceManager for application files\n'),
    _("Bottle.route(path=None, method='GET', callback=None, name=None, apply=None, skip=None, **config) \nA decorator to bind a function to a request URL. Example:\n@app.route('/hello/<name>')\ndef hello(name):\n    return 'Hello %s' % name\n\n\nThe <name> part is a wildcard. See Router for syntax\ndetails.\n\n\n\n\nParameters:\npath -- Request path or a list of paths to listen to. If no\npath is specified, it is automatically generated from the\nsignature of the function.\nmethod -- HTTP method (GET, POST, PUT, …) or a list of\nmethods to listen to. (default: GET)\ncallback -- An optional shortcut to avoid the decorator\nsyntax. route(..., callback=func) equals route(...)(func)\nname -- The name for this route. (default: None)\napply -- A decorator or plugin or a list of plugins. These are\napplied to the route callback in addition to installed plugins.\nskip -- A list of plugins, plugin classes or names. Matching\nplugins are not installed to this route. True skips all.\n\n\n\n\n\nAny additional keyword arguments are stored as route-specific\nconfiguration and passed to plugins (see Plugin.apply()).\n"),
    _('Bottle.run(**kwargs) \nCalls run() with the same parameters.\n'),
    _('Bottle.trigger_hook(_Bottle__name, *args, **kwargs) \nTrigger a hook and return a list of results.\n'),
    _('Bottle.uninstall(plugin) \nUninstall plugins. Pass an instance to remove a specific plugin, a type\nobject to remove all plugins that match that type, a string to remove\nall plugins with a matching name attribute or True to remove all\nplugins. Return the list of removed plugins.\n'),
    _('Bottle.wsgi(environ, start_response) \nThe bottle WSGI-interface.\n'),
    _('FileUpload(fileobj, name, filename, headers=None) \n'),
    _('FileUpload.content_length() \nCurrent value of the ‘Content-Length’ header.\n'),
    _('FileUpload.content_type() \nCurrent value of the ‘Content-Type’ header.\n'),
    _('FileUpload.file() \nOpen file(-like) object (BytesIO buffer or temporary file)\n'),
    _('FileUpload.filename() \nName of the file on the client file system, but normalized to ensure\nfile system compatibility. An empty filename is returned as ‘empty’.\nOnly ASCII letters, digits, dashes, underscores and dots are\nallowed in the final filename. Accents are removed, if possible.\nWhitespace is replaced by a single dash. Leading or tailing dots\nor dashes are removed. The filename is limited to 255 characters.\n'),
    _('FileUpload.get_header(name, default=None) \nReturn the value of a header within the mulripart part.\n'),
    _('FileUpload.headers() \nA HeaderDict with additional headers (e.g. content-type)\n'),
    _('FileUpload.name() \nName of the upload form field\n'),
    _('FileUpload.raw_filename() \nRaw filename as sent by the client (may contain unsafe characters)\n'),
    _('FileUpload.save(destination, overwrite=False, chunk_size=65536, destination) \nSave file to disk or copy its content to an open file(-like) object.\nIf destination is a directory, filename is added to the\npath. Existing files are not overwritten by default (IOError).\n\n\n\n\nParameters:\ndestination -- File path, directory or file(-like) object.\noverwrite -- If True, replace existing files. (default: False)\nchunk_size -- Bytes to read at a time. (default: 64kb)\n\n\n\n\n\n'),
    _('FormsDict(*a, **k) \nThis MultiDict subclass is used to store request form data.\nAdditionally to the normal dict-like item access methods (which return\nunmodified data as native strings), this container also supports\nattribute-like access to its values. Attributes are automatically de-\nor recoded to match input_encoding (default: ‘utf8’). Missing\nattributes default to an empty string.\n\n'),
    _('FormsDict.decode(encoding=None) \nReturns a copy with all keys and values de- or recoded to match\ninput_encoding. Some libraries (e.g. WTForms) want a\nunicode dictionary.\n'),
    _('FormsDict.getunicode(name, default=None, encoding=None) \nReturn the value as a unicode string, or the default.\n'),
    _('FormsDict.input_encoding() \nEncoding used for attribute values.\n'),
    _('FormsDict.recode_unicode() \nIf true (default), unicode strings are first encoded with latin1\nand then decoded to match input_encoding.\n'),
    _('HeaderDict(*a, **ka) \nA case-insensitive version of MultiDict that defaults to\nreplace the old value instead of appending it.\n\n'),
    _('LocalRequest(environ=None) \nA thread-local subclass of BaseRequest with a different\nset of attributes for each thread. There is usually only one global\ninstance of this class (request). If accessed during a\nrequest/response cycle, this instance always refers to the current\nrequest (even on a multithreaded server).\n\n'),
    _('LocalRequest.bind(environ=None) \nWrap a WSGI environ dictionary.\n'),
    _('LocalRequest.environ() \nThread-local property\n'),
    _("LocalResponse(body='', status=None, headers=None, **more_headers) \nA thread-local subclass of BaseResponse with a different\nset of attributes for each thread. There is usually only one global\ninstance of this class (response). Its attributes are used\nto build the HTTP response at the end of the request/response cycle.\n\n"),
    _('LocalResponse.body() \nThread-local property\n'),
    _('MultiDict(*a, **k) \nThis dict stores multiple values per key, but behaves exactly like a\nnormal dict in that it returns only the newest value for any given key.\nThere are special methods available to access the full list of values.\n\n'),
    _('MultiDict.append(key, value) \nAdd a new value to the list of values for this key.\n'),
    _('MultiDict.get(key, default=None, index=-1, type=None) \nReturn the most recent value for a key.\n\n\n\n\nParameters:\ndefault -- The default value to be returned if the key is not\npresent or the type conversion fails.\nindex -- An index for the list of available values.\ntype -- If defined, this callable is used to cast the value\ninto a specific type. Exception are suppressed and result in\nthe default value to be returned.\n\n\n\n\n\n'),
    _('MultiDict.getall(key) \nReturn a (possibly empty) list of values for a key.\n'),
    _('MultiDict.getlist(key) \nReturn a (possibly empty) list of values for a key.\n'),
    _('MultiDict.getone(key, default=None, index=-1, type=None) \nAliases for WTForms to mimic other multi-dict APIs (Django)\n'),
    _('MultiDict.replace(key, value) \nReplace the list of values with a single value.\n'),
    _("ResourceManager(base='./', opener=&lt;built-in function open&gt;, cachemode='all') \nThis class manages a list of search paths and helps to find and open\napplication-bound resources (files).\n\n\nParameters:\nbase -- default value for add_path() calls.\nopener -- callable used to open resources.\ncachemode -- controls which lookups are cached. One of ‘all’,\n‘found’ or ‘none’."),
    _("ResourceManager.add_path(path, base=None, index=None, create=False) \nAdd a new path to the list of search paths. Return False if the\npath does not exist.\n\n\n\n\nParameters:\npath -- The new search path. Relative paths are turned into\nan absolute and normalized form. If the path looks like a file\n(not ending in /), the filename is stripped off.\nbase -- Path used to absolutize relative search paths.\nDefaults to base which defaults to os.getcwd().\nindex -- Position within the list of search paths. Defaults\nto last index (appends to the list).\n\n\n\n\n\nThe base parameter makes it easy to reference files installed\nalong with a python module or package:\nres.add_path('./resources/', __file__)\n\n\n"),
    _('ResourceManager.cache() \nA cache for resolved paths. res.cache.clear() clears the cache.\n'),
    _('ResourceManager.lookup(name) \nSearch for a resource and return an absolute file path, or None.\nThe path list is searched in order. The first match is\nreturend. Symlinks are followed. The result is cached to speed up\nfuture lookups.\n'),
    _("ResourceManager.open(name, mode='r', *args, **kwargs) \nFind a resource and return a file object, or raise IOError.\n"),
    _('ResourceManager.path() \nA list of search paths. See add_path() for details.\n'),
    _('Route(app, rule, method, callback, name=None, plugins=None, skiplist=None, **config) \nThis class wraps a route callback along with route specific metadata and\nconfiguration and applies Plugins on demand. It is also responsible for\nturing an URL path rule into a regular expression usable by the Router.\n\n'),
    _('Route.all_plugins() \nYield all Plugins affecting this route.\n'),
    _('Route.app() \nThe application this route is installed to.\n'),
    _('Route.call() \nThe route callback with all plugins applied. This property is\ncreated on demand and then cached to speed up subsequent requests.\n'),
    _('Route.callback() \nThe original callback with no plugins applied. Useful for introspection.\n'),
    _('Route.config() \nAdditional keyword arguments passed to the Bottle.route()\ndecorator are stored in this dictionary. Used for route-specific\nplugin configuration and meta-data.\n'),
    _('Route.get_callback_args() \nReturn a list of argument names the callback (most likely) accepts\nas keyword arguments. If the callback is a decorated function, try\nto recover the original function before inspection.\n'),
    _('Route.get_config(key, default=None) \nLookup a config field and return its value, first checking the\nroute.config, then route.app.config.\n'),
    _('Route.get_undecorated_callback() \nReturn the callback. If the callback is a decorated function, try to\nrecover the original function.\n'),
    _('Route.method() \nThe HTTP method as a string (e.g. GET).\n'),
    _('Route.name() \nThe name of the route (if specified) or None.\n'),
    _('Route.plugins() \nA list of route-specific plugins (see Bottle.route()).\n'),
    _('Route.prepare() \nDo all on-demand work immediately (useful for debugging).\n'),
    _('Route.reset() \nForget any cached values. The next time call is accessed,\nall plugins are re-applied.\n'),
    _('Route.rule() \nThe path-rule string (e.g. /wiki/<page>).\n'),
    _('Route.skiplist() \nA list of plugins to not apply to this route (see Bottle.route()).\n'),
    _('WSGIHeaderDict(environ) \nThis dict-like class wraps a WSGI environ dict and provides convenient\naccess to HTTP_* fields. Keys and values are native strings\n(2.x bytes or 3.x unicode) and keys are case-insensitive. If the WSGI\nenvironment contains non-native string values, these are de- or encoded\nusing a lossless ‘latin1’ character set.\n\nThe API will remain stable even on changes to the relevant PEPs.\nCurrently PEP 333, 444 and 3333 are supported. (PEP 444 is the only one\nthat uses non-native strings.)\n\n'),
    _('WSGIHeaderDict.cgikeys() \nList of keys that do not have a HTTP_ prefix.\n'),
    _('WSGIHeaderDict.raw(key, default=None) \nReturn the header value as is (may be bytes or unicode).\n'),
    _('app() \nReturn the current Default Application. Actually, these are callable instances of AppStack and implement a stack-like API.\n'),
    _('cookie_decode(data, key, digestmod=None) \nVerify and decode an encoded string. Return an object or None.\n'),
    _('cookie_encode(data, key, digestmod=None) \nEncode and sign a pickle-able object. Return a (byte) string\n'),
    _('cookie_is_encoded(data) \nReturn True if the argument looks like a encoded cookie.\n'),
    _('debug(mode=True) \nChange the debug level.\nThere is only one debug level supported at the moment.\n'),
    _('error(...) \nDecorator to install an error handler to the current default application. See Bottle.error() for details.\n'),
    _("load(target, **namespace) \nImport a module or fetch an object from a module.\n\npackage.module returns module as a module object.\npack.mod:name returns the module variable name from pack.mod.\npack.mod:func() calls pack.mod.func() and returns the result.\n\nThe last form accepts not only function calls, but any type of\nexpression. Keyword arguments passed to this function are available as\nlocal variables. Example: import_string('re:compile(x)', x='[a-z]')\n"),
    _('load_app(target) \nLoad a bottle application from a module and make sure that the import\ndoes not affect the current default application, but returns a separate\napplication object. See load() for the target parameter.\n'),
    _('parse_auth(header) \nParse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\n'),
    _('parse_date(ims) \nParse rfc1123, rfc850 and asctime timestamps and return UTC epoch.\n'),
    _('path_shift(script_name, path_info, shift=1) \nShift path fragments from PATH_INFO to SCRIPT_NAME and vice versa.\n\n\n\n\nReturns:The modified paths.\n\n\nParameters:\nscript_name -- The SCRIPT_NAME path.\nscript_name -- The PATH_INFO path.\nshift -- The number of path fragments to shift. May be negative to\nchange the shift direction. (default: 1)\n\n\n\n\n\n'),
    _("route(path, method='GET', callback=None, **options) \nDecorator to install a route to the current default application. See Bottle.route() for details.\n"),
    _("run(app=None, server='wsgiref', host='127.0.0.1', port=8080, interval=1, reloader=False, quiet=False, plugins=None, debug=None, config=None, **kargs) \nStart a server instance. This method blocks until the server terminates.\n\n\n\n\nParameters:\napp -- WSGI application or target string supported by\nload_app(). (default: default_app())\nserver -- Server adapter to use. See server_names keys\nfor valid names or pass a ServerAdapter subclass.\n(default: wsgiref)\nhost -- Server address to bind to. Pass 0.0.0.0 to listens on\nall interfaces including the external one. (default: 127.0.0.1)\nport -- Server port to bind to. Values below 1024 require root\nprivileges. (default: 8080)\nreloader -- Start auto-reloading server? (default: False)\ninterval -- Auto-reloader interval in seconds (default: 1)\nquiet -- Suppress output to stdout and stderr? (default: False)\noptions -- Options passed to the server adapter.\n\n\n\n\n\n"),
    _('template(*args, **kwargs) \nGet a rendered template as a string iterator.\nYou can use a name, a filename or a template string as first parameter.\nTemplate rendering arguments can be passed as dictionaries\nor directly (as keyword arguments).\n'),
    _('view(tpl_name, **defaults) \nDecorator: renders a template for a handler.\nThe handler can control its behavior like that:\n\n\nreturn a dict of template vars to fill out the template\nreturn something other than a dict and the view decorator will not\nprocess the template, but return the handler result as is.\nThis includes returning a HTTPResponse(dict) to get,\nfor instance, JSON with autojson or other castfilters.\n\n\n'),
    _("yieldroutes(func) \nReturn a generator for routes that match the signature (name, args)\nof the func parameter. This may yield more than one route if the function\ntakes optional keyword arguments. The output is best described by example:\na()         -> '/a'\nb(x, y)     -> '/b/<x>/<y>'\nc(x, y=5)   -> '/c/<x>' and '/c/<x>/<y>'\nd(x=5, y=6) -> '/d' and '/d/<x>' and '/d/<x>/<y>'\n\n\n"),
]
