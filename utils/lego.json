[
{"name": "battery.voltage", "args": [], "description": "Return the battery voltage in millivolts.\n"},
{"name": "battery.current", "args": [], "description": "Return the battery current consumption in mA. This is the current flowing from the battery.\n"},
{"name": "battery.temperature", "args": [], "description": "Return the battery temperature in degree Celcius.\n"},
{"name": "battery.charger_detect", "args": [], "description": "Returns the charger detected.\nReturns False if  no charger is attached.\nIf a charger has been attached the following is returned:\n\n\nflipper.USB_CH_PORT_NONE = 0\nflipper.USB_CH_PORT_SDP  = 1\nflipper.USB_CH_PORT_CDP  = 2\nflipper.USB_CH_PORT_DCP  = 3\n\n\nSDP is a Standard Downstream Port (typical USB port)\nDCP is a Dedicated Charging Port (high current USB port)\nCDP is a Charging Downstream Port (wall charger)\n"},
{"name": "battery.capacity_left", "args": [], "description": "Returns the capacity left on the battery as a percentage of fully charged.\n"},
{"name": "battery.info", "args": [], "description": "Returns a dict with the Battery subsystem information. Avoid calling\nthis function every time you need a specifc item. It\u2019s better to save\nthe result in a local variable and then reference the dict elements as\nneeded:\n\nerror_state - A list of currently active errors incl. 0 (flipper.BATTERY_NO_ERROR) if no errors are active. Possible error are:\n\n\nbattery.BATTERY_NO_ERROR = 0\nbattery.BATTERY_HUB_TEMPERATURE_CRITICAL_OUT_OF_RANGE = -1\nbattery.BATTERY_TEMPERATURE_OUT_OF_RANGE = -2\nbattery.BATTERY_TEMPERATURE_SENSOR_FAIL = -3\nbattery.BATTERY_BAD_BATTERY = -4\nbattery.BATTERY_VOLTAGE_TOO_LOW = -5\n\n\n\ncharger_state - The state of the charter circuit:\n\n\nbattery.DISCHARGING = 0\nbattery.CHARGING_ONGOING = 1\nbattery.CHARGING_COMPLETED = 2\nbattery.FAIL = -1\n\n\n\ncharge_voltage - The battery volgate in mV\n\ncharge_voltage_filtered - The battery volgate (filtered) in mV\n\ntemperature - The battery temperature in degree Celcius.\n\ncharge_current - The battery charging current in mA (the current flowing into the battery)\n\n\nNote\nThe returned value is not calibrated.\n\n\n\nbattery_capacity_left - The battery capacity left in percent of full capacity\n\n\n"},
{"name": "hub.battery", "args": [], "description": ""},
{"name": "hub.Button", "args": [], "description": "Represents the set of methods that can be called on any of the 4 buttons\non the Hub.\n\n"},
{"name": "hub.display", "args": [], "description": "Create and return a display object.\n\n"},
{"name": "port.X.device", "args": [], "description": "Represents the set of methods that can be called on a device plugged\ninto any of the 6 ports on the Hub.\n\n"},
{"name": "port.X.device.get", "args": [], "description": "Returns a list of value(s) that the currently active device mode makes\navailable. A device can be in single or combi-mode. In either case\nthe return value is a list of one or more values representing the\ndata described in the corresponing mode command.\nThere are 3 different formats available:\n\n\n0 = Raw\n1 = Pct\n2 = SI\n\n\n"},
{"name": "port.X.device.mode", "args": [], "description": "Puts the device in the specified mode(s) depending on the specified \nmode value(s).\nIf the mode specifier is an integer, then the device is put into that mode.\nThe data returned by get() is one or more values corresponding to the\nnumber of datasets available in that mode. For example, a color sensor in\nindex color mode returns exactly one value, but in RGB mode a list of three\nvalues is returned.\nIf the mode specifier is a list, then we are asking for the device to be put\ninto combi-mode. The get() function now returns exactly the values corresponding\nto the requested modes and the datasets within that mode.\n\nNote\nThe mode specifier must be a list of 2-element tuples. If one of the list\nelements is not a 2-element tuple then it is ignored without error or warning.\n\nIf the mode specifier is an integer and it is followed by an argument that contains\na byte array - this array will be sent to the device as an output mode write\n"},
{"name": "port.X.device.pwm", "args": ["value"], "description": "Keyword arguments:\n\nvalue [-100 - 100] Applies a PWM signal to the power pins of the port.\n\nUseful for controlling directly. The polarity of the PWM signal matches the\nsign of the value.\nA value of zero stops the PWM signal and leaves the port driver in\nthe floating state.\n"},
{"name": "hub.Image", "args": ["string"], "description": "If string is used, it has to consist of digits 0-9 arranged into\nlines, describing the image, for example:\n\nor:\n\nwill create a 5\u00d75 image of an X. The end of a line is indicated by a colon.\nIt\u2019s also possible to use a newline (n) to indicate the end of a line\nlike this:\n\nor:\n\nThe other form creates an empty image with width columns and\nheight rows. Optionally buffer can be an array of\nwidth``\u00d7``height integers in range 0-9 to initialize the image, for example:\n\nor:\n\n"},
{"name": "hub.Sound", "args": [], "description": "Represents a sound generator.\n\n"},
{"name": "hub.Sound.on", "args": [], "description": "Turns on the internal amplifier chip. Default at power-up.\n"},
{"name": "hub.Sound.off", "args": [], "description": "Turns off the internal amplifier chip.\n"},
{"name": "hub.Sound.volume", "args": ["0-10"], "description": "Get or set the volume of the sound system\n\nWith no argument, return 0-10 depending on the current volume\nWith volume given, set the volume of the sound system\n\n"},
{"name": "hub.Sound.play", "args": ["filename", "12000-20000"], "description": "Play a sound file at the current volume. The filename must be specified, if\nthe file does not exist no sound is played.\nThe sound file must be raw 8 bit data at 16 kHz, and the second optional\nparameter specifies the playback speed. Currently the range is 12-20 kHz\nbut we may chnage that to +/- 10 or some other reasonable value.\n"},
{"name": "port.X", "args": [], "description": "Represents the set of methods that can be called on any of the 6 ports\non the Hub.\n\n"},
{"name": "port.X.info", "args": [], "description": "Returns a dictionary describing the capabilities of the device connected\nto the port. If a port has nothing plugged in, then the result is a\ndictionary with only a type key with a value of None.\nA port with a PoweredUp compatible device plugged in returns a dictionary\nlike this:\n\nfw_version : Firmware version as a 32 bit unsigned integer\nhw_version : Hardware version as a 32 bit unsigned integer\ntype : PoweredUp device type as an integer\ncombi_modes : A list of legal combi-modes as 16 bit unsigend integers\nspeed : The maximum baud rate of the device (0 for simple IDs)\nmodes : A list of dictionaries representing available modes\n\nEach modes list item dictionary has the  following keys:\n\nname : The name of the mode as a string\ncapability : The 48 capability bits as a binary string of 6 characters\nsymbol : The SI ymbol name of the data returned by the device in SI format\nraw : The min and max range of raw data expressed as a 2 element tuple\npct : The min and max range of % range data expressed as a 2 element tuple\nsi : The min and max range of si data expressed as a 2 element tuple\nmap_out : The output mapping bits as an 8 bit value\nmap_in : The infou mapping bits as an 8 bit value\nformat : A dictionary representing the format data for this mode\n\nEach format dictionary has the  following keys:\n\ndatasets : The number of data values that this mode returns\nfigures : The number of digits in the data value\ndecimals : The number of digits after the implied decimal point\ntype : The type of return data (signed 8, 16, 32 or float)\n\n"},
{"name": "port.X.motor", "args": [], "description": "Represents the set of methods that can be called on a motor plugged\ninto any of the 6 ports on the Hub.\n\n"},
{"name": "hub.Led", "args": [], "description": "Represents the center RGB LED.\n\n"},
{"name": "hub.USB_VCP", "args": [], "description": "Create a new USB_VCP object.\n\n"},
{"name": "hub.BT_VCP", "args": [], "description": "Create a new BT_VCP object.\n\n"},
{"name": "hub.Image.width", "args": [], "description": "Return the number of columns in the image.\n"},
{"name": "hub.Image.height", "args": [], "description": "Return the numbers of rows in the image.\n"},
{"name": "hub.Image.get_pixel", "args": ["x", "y"], "description": "Return the brightness of pixel at column x and row y as an\ninteger between 0 and 9.\n"},
{"name": "hub.Image.set_pixel", "args": ["x", "y", "value"], "description": "Set the brightness of the pixel at column x and row y to the\nvalue, which has to be between 0 (dark) and 9 (bright).\nThis method will raise an exception when called on any of the built-in\nread-only images, like Image.HEART.\n"},
{"name": "hub.Sound.beep", "args": ["100-10000", "0-32767", "0-3"], "description": "Play a beep tone on the sound system. The parameters are all optional, and\nin order are:\n\n\nfrequency: defaults to 1000 Hz\ntime: defaults to 1000 msec\nwaveform: defaults to 0 (see below)\n\n\nThere are 4 different waveforms available:\n\n\n0 = sin\n1 = square\n2 = triangle\n3 = sawtooth\n\n\n"},
{"name": "hub.Sound.callback", "args": ["fun(v)"], "description": "Register the given function to be called when the sound completes\nor is interrupted. If fun is None, then the callback is disabled.\nThe function accepts one of the following values:\n0 if the sound completed playing\n1 if the sound was interrupted\n"},
{"name": "port.X.pwm", "args": ["value"], "description": "Keyword arguments:\n\nvalue [-100 - 100] Applies a PWM signal to the power pins of the port.\n\nUseful for controlling directly. The polarity of the PWM signal matches the\nsign of the value.\nA value of zero stops the PWM signal and leaves the port driver in\nthe floating state.\n"},
{"name": "port.X.callback", "args": ["fun"], "description": "Set the function to be called when t hotplug event occurs on the port.\nIf fun is None then the callback will be disabled.\nfun() should take one parameter that indicates why the callback was\ninitiated. The following reasons can apply:\n\n0 = PORT_EVENT_DETACHED\n1 = PORT_EVENT_ATTACHED\n\n"},
{"name": "port.X.mode", "args": ["mode"], "description": "Set the mode of the port.\n"},
{"name": "port.X.motor.get", "args": [], "description": "Returns the value(s) that the currently active device mode makes\navailable.\n\nNote\nSee the detailed explanation in the port.X.device section\n\n"},
{"name": "port.X.motor.mode", "args": ["value"], "description": "Puts the device in the specified mode.\n\nNote\nSee the detailed explanation in the port.X.device section\n\n"},
{"name": "port.X.motor.pwm", "args": ["value"], "description": "Keyword arguments:\n\nvalue [-100 - 100] Applies a PWM signal to the power pins of the port.\n\nUseful for controlling directly. The polarity of the PWM signal matches the\nsign of the value.\nA value of zero stops the PWM signal and leaves the motor driver in\nthe floating state.\n"},
{"name": "port.X.motor.float", "args": [], "description": "Force the motor driver to the Float state. The motor driver no longer delivers\na PWM signal and the motor will coast to a stop if it is running.\n"},
{"name": "port.X.motor.brake", "args": [], "description": "Force the motor driver to the Brake state. The motor driver shorts its output\nterminals and the motor will stop more quickly than if it Floats. Note\nthat this is NOT the same as actively holding motor position.\n"},
{"name": "port.X.motor.hold", "args": [], "description": "Force the motor driver to the Brake state. The motor will actively hold its target position.\n"},
{"name": "port.X.motor.busy", "args": ["type"], "description": "Check to see if the motor is busy.\nKeyword argument(s):\n\n\u2018type\u2019 - specifies which operation type to check for: mode/sensor (BUSY_MODE) or motor (BUSY_MOTOR).\n\n"},
{"name": "port.X.motor.run_at_speed", "args": ["speed", "max_power", "acceleration", "deceleration", "stall"], "description": "Keyword arguments:\n\nspeed [-100 - 100] - specifies the speed of the motor.\nmax_power [0 - 100] - specifies the maximum power of the motor when regulating the speed\nacceleration [0 - 10000] - specifies the time in msec for the motor to achieve specified speed\ndeceleration [0 - 10000] - specifies the time in msec for the motor to come to stop from full speed\nstall - specifies if stall detection is enabled or disabled (True/False)\n\n"},
{"name": "port.X.motor.run_for_degrees", "args": ["degrees", "speed", "max_power", "stop", "acceleration", "deceleration", "stall"], "description": "Keyword arguments:\n\ndegrees [-MAXINT - +MAXINT] - specifies the degrees to turn from current target position\nspeed [-100 - 100] - specifies the speed of the motor.\nmax_power [0 - 100] - specifies the maximum power of the motor when regulating the speed\nstop - specifies the stop state of the motor. [0 = MOTOR_STOP_FLOAT, 1 = MOTOR_STOP_BRAKE, 2 = MOTOR_STOP_HOLD]\nacceleration [0 - 10000] - specifies the time in msec for the motor to achieve specified speed\ndeceleration [0 - 10000] - specifies the time in msec for the motor to come to stop from full speed\nstall - specifies if stall detection is enabled or disabled (True/False)\n\n"},
{"name": "port.X.motor.run_to_position", "args": ["position", "speed", "max_power", "stop", "acceleration", "deceleration", "stall"], "description": "Keyword arguments:\n\nposition [-MAXINT - +MAXINT] - specifies the position of the motor.\nspeed [-100 - 100] - specifies the speed of the motor.\nmax_power [0 - 100] - specifies the maximum power of the motor when regulating the speed\nstop - specifies the stop state of the motor. [0 = MOTOR_STOP_FLOAT, 1 = MOTOR_STOP_BRAKE, 2 = MOTOR_STOP_HOLD]\nacceleration [0 - 10000] - specifies the time in msec for the motor to achieve specified speed\ndeceleration [0 - 10000] - specifies the time in msec for the motor to come to stop from full speed\nstall - specifies if stall detection is enabled or disabled (True/False)\n\n"},
{"name": "port.X.motor.run_for_time", "args": ["msec", "speed", "max_power", "stop", "acceleration", "deceleration", "stall"], "description": "\nmsec [0 - 65535] - Force the motor driver to run for msec milliseconds at speed. When the msec time expires the motor driver is forced to the stop state. If msec is negative a time of 0 (zero) milliseconds is assumed.\nmax_power [0 - 100] - specifies the maximum power of the motor when regulating the speed\nstop - specifies the stop state of the motor. [0 = MOTOR_STOP_FLOAT, 1 = MOTOR_STOP_BRAKE, 2 = MOTOR_STOP_HOLD]\nacceleration [0 - 10000] - specifies the time in msec for the motor to achieve specified speed\ndeceleration [0 - 10000] - specifies the time in msec for the motor to come to stop from full speed\nstall - specifies if stall detection is enabled or disabled (True/False)\n\n"},
{"name": "port.X.motor.callback", "args": ["fun(v)"], "description": "A callback function that is invoked when the command is interrupted or completes\nThe callback function accepts one and only one parameter that indicates why the callback was\ninitiated. The following reasons can apply:\n\n0 = MOTOR_EVENT_COMPLETED\n1 = MOTOR_EVENT_INTERRUPTED\n2 = MOTOR_EVENT_STALL\n\n"},
{"name": "port.X.motor.preset", "args": ["position"], "description": "Presets the motor encoder with a new position value.\n\n\u2018position\u2019 - [0 - 4294967295] - Encoder value.\n\n"},
{"name": "port.X.motor.default", "args": [], "description": "With no parameters, returns a dict with the current default values that are\nused for motor operations if the corresponding keyword arguments are not specified.\nThe current defaults may be:\n\nspeed - Not implemented\nmax_power - Max % pwm to be used in regulated speed commands\nacceleration - Time in msec to reach 100% of motor design speed from 0%\ndeceleration - Time in msec to reach 0% of motor design speed from 100%\nstop - Default stop action at end of comment\npid - Default PID value used if set here or by motor.pid(). If not set the values returned is 0 (zero)\nstall - Stall detection True/False.\ncallback - A callback function that is invoked when the command is interrupted or completes\n\nThe callback function accepts one and only one parameter that indicates why the callback was\ninitiated. The following reasons can apply:\n\n0 = MOTOR_EVENT_COMPLETED\n1 = MOTOR_EVENT_INTERRUPTED\n2 = MOTOR_EVENT_STALL\n\n\nNote\nAt the moment it is not possible to readout the default PID values used\nin the low-level drivers. To do this it is required to implement additional\nsub-commands in the LPF2 protocol.\n\n"},
{"name": "port.X.motor.pair", "args": ["motor"], "description": "Create a <MotorPair> object. The motor parameter must be motor object\nand cannot be the motor object that the pair() method is called on.\nIf the <MotorPair> object cannot be created due to a timeout False is returned.\nIt the object could not be created due to another fault None is retuned.\nSee the MotorPair API for methods that can be applied to a motor pair.\n"},
{"name": "port.X.motor.pid", "args": [], "description": "With no parameters returns a tuple with the current used P, I and D values\nif the values have been set using this function or motor.default(). If not\nset the values returned is 0 (zero) and is invalid.\n\nNote\nAt the moment it is not possible to readout the default PID values used\nin the low-level drivers. To do this it is required to implement additional\nsub-commands in the LPF2 protocol.\n\n"},
{"name": "hub.MotorPair", "args": [], "description": "Represents the set of methods that can be called on a motor pair\nobject after it is created using the hub.port.X.motor.pair()\n\n"},
{"name": "hub.MotorPair.primary", "args": [], "description": "Returns the motor object that initiated the pair() operation.\n"},
{"name": "hub.MotorPair.secondary", "args": [], "description": "Returns the motor object that was the parameter in the pair() operation.\n"},
{"name": "hub.MotorPair.id", "args": [], "description": "Returns the paired motor ID.\n"},
{"name": "hub.MotorPair.pwm", "args": ["value0", "value1"], "description": "\nvalue [-100 - 100] Applies a PWM signal to the power pins of the port.\n\nUseful for controlling directly. The polarity of the PWM signal matches the\nsign of the value.\nA value of zero stops the PWM signal and leaves the motor driver in\nthe floating state.\n"},
{"name": "hub.MotorPair.float", "args": [], "description": "Force the motor driver to the Float state. The motor driver no longer delivers\na PWM signal and the motor will coast to a stop if it is running.\n"},
{"name": "hub.MotorPair.brake", "args": [], "description": "Force the motor driver to the Brake state. The motor driver shorts its output\nterminals and the motor will stop more quickly than if it Floats. Note\nthat this is NOT the same as actively holding motor position.\n"},
{"name": "hub.MotorPair.hold", "args": [], "description": "Force the motor driver to the Brake state. The motor will actively hold its target position.\n"},
{"name": "hub.MotorPair.run_at_speed", "args": ["speed0", "speed1", "max_power", "acceleration", "deceleration"], "description": "Keyword arguments:\n\nspeed [-100 - 100] - specifies the speed of the motor.\nmax_power [0 - 100] - specifies the maximum power of the motor when regulating the speed\nacceleration [0 - 10000] - specifies the time in msec for the motor to achieve specified speed\ndeceleration [0 - 10000] - specifies the time in msec for the motor to come to stop from full speed\n\n"},
{"name": "hub.MotorPair.run_for_degrees", "args": ["degrees", "speed0", "speed1", "max_power", "acceleration", "deceleration", "stop"], "description": "Keyword arguments:\n\ndegrees [-MAXINT - +MAXINT] - specifies the degrees to turn from current target position\nspeed [-100 - 100] - specifies the speed of the motor.\nmax_power [0 - 100] - specifies the maximum power of the motor when regulating the speed\nacceleration [0 - 10000] - specifies the time in msec for the motor to achieve specified speed\ndeceleration [0 - 10000] - specifies the time in msec for the motor to come to stop from full speed\nstop - specifies the stop state of the motor. [0 = MOTOR_STOP_FLOAT, 1 = MOTOR_STOP_BRAKE, 2 = MOTOR_STOP_HOLD]\n\n"},
{"name": "hub.MotorPair.run_to_position", "args": ["position0", "position1", "speed", "max_power", "acceleration", "deceleration", "stop"], "description": "Keyword arguments:\n\nposition [-MAXINT - +MAXINT] - specifies the position of the motor.\nspeed [-100 - 100] - specifies the speed of the motor.\nmax_power [0 - 100] - specifies the maximum power of the motor when regulating the speed\nacceleration [0 - 10000] - specifies the time in msec for the motor to achieve specified speed\ndeceleration [0 - 10000] - specifies the time in msec for the motor to come to stop from full speed\nstop - specifies the stop state of the motor. See \u2018run_for_degrees\u2019 method for stop types.\n\n"},
{"name": "hub.MotorPair.run_for_time", "args": ["msec", "speed0", "speed1", "max_power", "acceleration", "deceleration", "stop"], "description": "\nmsec [0 - 65535] - Force the motor driver to run for msec milliseconds at speed. When the msec time expires the motor driver is forced to the stop state. If msec is negative a time of 0 (zero) milliseconds is assumed.\nmsec [-100 - 10000] - specifies the amount of milliseconds.\nspeed [-100 - 100] - specifies the speed of the motor.\nmax_power [0 - 100] - specifies the maximum power of the motor when regulating the speed\nacceleration [0 - 10000] - specifies the time in msec for the motor to achieve specified speed\ndeceleration [0 - 10000] - specifies the time in msec for the motor to come to stop from full speed\nstop - specifies the stop state of the motor. See \u2018run_for_degrees\u2019 method for stop types.\n\n"},
{"name": "hub.MotorPair.callback", "args": ["fun(v)"], "description": "A callback function that is invoked when the command is interrupted or completes\nThe callback function accepts one and only one parameter that indicates why the callback was\ninitiated. The following reasons can apply:\n\n0 = MOTOR_EVENT_COMPLETED\n1 = MOTOR_EVENT_INTERRUPTED\n2 = MOTOR_EVENT_STALL\n\n"},
{"name": "hub.MotorPair.preset", "args": ["position0", "position1"], "description": "Presets the motor encoder with a new position value.\n\n\u2018position0\u2019 - [0 - 4294967296] - Encoder value.\n\u2018position1\u2019 - [0 - 4294967296] - Encoder value.\n\n"},
{"name": "hub.MotorPair.unpair", "args": [], "description": "Undo a pair of two motors. After call of this method the <MotorPair> object\nis invalid.\nThis method will return True if the uppair was successful. Otherwize False\nis returned (if a timeout has happend).\n"},
{"name": "hub.MotorPair.pid", "args": [], "description": "With no parameters returns a tuple with the current used P, I and D values\nif the values have been set using this function or motor.default(). If not\nset the values returned is 0 (zero) and is invalid.\n\nNote\nAt the moment it is not possible to readout the default PID values used\nin the low-level drivers. To do this it is required to implement additional\nsub-commands in the LPF2 protocol.\n\n"}
]