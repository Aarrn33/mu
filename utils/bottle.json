[
{"name": "debug", "args": ["mode=True"], "description": "Change the debug level.\nThere is only one debug level supported at the moment.\n"},
{"name": "run", "args": ["app=None", "server='wsgiref'", "host='127.0.0.1'", "port=8080", "interval=1", "reloader=False", "quiet=False", "plugins=None", "debug=None", "config=None", "**kargs"], "description": "Start a server instance. This method blocks until the server terminates.\n\n\n\n\nParameters:\napp \u2013 WSGI application or target string supported by\nload_app(). (default: default_app())\nserver \u2013 Server adapter to use. See server_names keys\nfor valid names or pass a ServerAdapter subclass.\n(default: wsgiref)\nhost \u2013 Server address to bind to. Pass 0.0.0.0 to listens on\nall interfaces including the external one. (default: 127.0.0.1)\nport \u2013 Server port to bind to. Values below 1024 require root\nprivileges. (default: 8080)\nreloader \u2013 Start auto-reloading server? (default: False)\ninterval \u2013 Auto-reloader interval in seconds (default: 1)\nquiet \u2013 Suppress output to stdout and stderr? (default: False)\noptions \u2013 Options passed to the server adapter.\n\n\n\n\n\n"},
{"name": "load", "args": ["target", "**namespace"], "description": "Import a module or fetch an object from a module.\n\npackage.module returns module as a module object.\npack.mod:name returns the module variable name from pack.mod.\npack.mod:func() calls pack.mod.func() and returns the result.\n\nThe last form accepts not only function calls, but any type of\nexpression. Keyword arguments passed to this function are available as\nlocal variables. Example: import_string('re:compile(x)', x='[a-z]')\n"},
{"name": "load_app", "args": ["target"], "description": "Load a bottle application from a module and make sure that the import\ndoes not affect the current default application, but returns a separate\napplication object. See load() for the target parameter.\n"},
{"name": "app", "args": [], "description": "Return the current Default Application. Actually, these are callable instances of AppStack and implement a stack-like API.\n"},
{"name": "route", "args": ["path", "method='GET'", "callback=None", "**options"], "description": "Decorator to install a route to the current default application. See Bottle.route() for details.\n"},
{"name": "error", "args": ["..."], "description": "Decorator to install an error handler to the current default application. See Bottle.error() for details.\n"},
{"name": "parse_date", "args": ["ims"], "description": "Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch.\n"},
{"name": "parse_auth", "args": ["header"], "description": "Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\n"},
{"name": "cookie_encode", "args": ["data", "key", "digestmod=None"], "description": "Encode and sign a pickle-able object. Return a (byte) string\n"},
{"name": "cookie_decode", "args": ["data", "key", "digestmod=None"], "description": "Verify and decode an encoded string. Return an object or None.\n"},
{"name": "cookie_is_encoded", "args": ["data"], "description": "Return True if the argument looks like a encoded cookie.\n"},
{"name": "yieldroutes", "args": ["func"], "description": "Return a generator for routes that match the signature (name, args)\nof the func parameter. This may yield more than one route if the function\ntakes optional keyword arguments. The output is best described by example:\na()         -> '/a'\nb(x, y)     -> '/b/<x>/<y>'\nc(x, y=5)   -> '/c/<x>' and '/c/<x>/<y>'\nd(x=5, y=6) -> '/d' and '/d/<x>' and '/d/<x>/<y>'\n\n\n"},
{"name": "path_shift", "args": ["script_name", "path_info", "shift=1"], "description": "Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa.\n\n\n\n\nReturns:The modified paths.\n\n\nParameters:\nscript_name \u2013 The SCRIPT_NAME path.\nscript_name \u2013 The PATH_INFO path.\nshift \u2013 The number of path fragments to shift. May be negative to\nchange the shift direction. (default: 1)\n\n\n\n\n\n"},
{"name": "view", "args": ["tpl_name", "**defaults"], "description": "Decorator: renders a template for a handler.\nThe handler can control its behavior like that:\n\n\nreturn a dict of template vars to fill out the template\nreturn something other than a dict and the view decorator will not\nprocess the template, but return the handler result as is.\nThis includes returning a HTTPResponse(dict) to get,\nfor instance, JSON with autojson or other castfilters.\n\n\n"},
{"name": "template", "args": ["*args", "**kwargs"], "description": "Get a rendered template as a string iterator.\nYou can use a name, a filename or a template string as first parameter.\nTemplate rendering arguments can be passed as dictionaries\nor directly (as keyword arguments).\n"},
{"name": "MultiDict", "args": ["*a", "**k"], "description": "This dict stores multiple values per key, but behaves exactly like a\nnormal dict in that it returns only the newest value for any given key.\nThere are special methods available to access the full list of values.\n\n"},
{"name": "MultiDict.get", "args": ["key", "default=None", "index=-1", "type=None"], "description": "Return the most recent value for a key.\n\n\n\n\nParameters:\ndefault \u2013 The default value to be returned if the key is not\npresent or the type conversion fails.\nindex \u2013 An index for the list of available values.\ntype \u2013 If defined, this callable is used to cast the value\ninto a specific type. Exception are suppressed and result in\nthe default value to be returned.\n\n\n\n\n\n"},
{"name": "MultiDict.append", "args": ["key", "value"], "description": "Add a new value to the list of values for this key.\n"},
{"name": "MultiDict.replace", "args": ["key", "value"], "description": "Replace the list of values with a single value.\n"},
{"name": "MultiDict.getall", "args": ["key"], "description": "Return a (possibly empty) list of values for a key.\n"},
{"name": "MultiDict.getone", "args": ["key", "default=None", "index=-1", "type=None"], "description": "Aliases for WTForms to mimic other multi-dict APIs (Django)\n"},
{"name": "MultiDict.getlist", "args": ["key"], "description": "Return a (possibly empty) list of values for a key.\n"},
{"name": "HeaderDict", "args": ["*a", "**ka"], "description": "A case-insensitive version of MultiDict that defaults to\nreplace the old value instead of appending it.\n\n"},
{"name": "FormsDict", "args": ["*a", "**k"], "description": "This MultiDict subclass is used to store request form data.\nAdditionally to the normal dict-like item access methods (which return\nunmodified data as native strings), this container also supports\nattribute-like access to its values. Attributes are automatically de-\nor recoded to match input_encoding (default: \u2018utf8\u2019). Missing\nattributes default to an empty string.\n\n"},
{"name": "FormsDict.decode", "args": ["encoding=None"], "description": "Returns a copy with all keys and values de- or recoded to match\ninput_encoding. Some libraries (e.g. WTForms) want a\nunicode dictionary.\n"},
{"name": "FormsDict.getunicode", "args": ["name", "default=None", "encoding=None"], "description": "Return the value as a unicode string, or the default.\n"},
{"name": "FormsDict.input_encoding", "args": null, "description": "Encoding used for attribute values.\n"},
{"name": "FormsDict.recode_unicode", "args": null, "description": "If true (default), unicode strings are first encoded with latin1\nand then decoded to match input_encoding.\n"},
{"name": "WSGIHeaderDict", "args": ["environ"], "description": "This dict-like class wraps a WSGI environ dict and provides convenient\naccess to HTTP_* fields. Keys and values are native strings\n(2.x bytes or 3.x unicode) and keys are case-insensitive. If the WSGI\nenvironment contains non-native string values, these are de- or encoded\nusing a lossless \u2018latin1\u2019 character set.\n\nThe API will remain stable even on changes to the relevant PEPs.\nCurrently PEP 333, 444 and 3333 are supported. (PEP 444 is the only one\nthat uses non-native strings.)\n\n"},
{"name": "WSGIHeaderDict.raw", "args": ["key", "default=None"], "description": "Return the header value as is (may be bytes or unicode).\n"},
{"name": "WSGIHeaderDict.cgikeys", "args": null, "description": "List of keys that do not have a HTTP_ prefix.\n"},
{"name": "AppStack", "args": [], "description": "A stack-like list. Calling it returns the head of the stack.\n\n"},
{"name": "AppStack.pop", "args": [], "description": "Return the current default application and remove it from the stack.\n"},
{"name": "AppStack.push", "args": ["value=None"], "description": "Add a new Bottle instance to the stack\n"},
{"name": "AppStack.new_app", "args": ["value=None"], "description": "Add a new Bottle instance to the stack\n"},
{"name": "ResourceManager", "args": ["base='./'", "opener=&lt;built-in function open&gt;", "cachemode='all'"], "description": "This class manages a list of search paths and helps to find and open\napplication-bound resources (files).\n\n\nParameters:\nbase \u2013 default value for add_path() calls.\nopener \u2013 callable used to open resources.\ncachemode \u2013 controls which lookups are cached. One of \u2018all\u2019,\n\u2018found\u2019 or \u2018none\u2019."},
{"name": "ResourceManager.add_path", "args": ["path", "base=None", "index=None", "create=False"], "description": "Add a new path to the list of search paths. Return False if the\npath does not exist.\n\n\n\n\nParameters:\npath \u2013 The new search path. Relative paths are turned into\nan absolute and normalized form. If the path looks like a file\n(not ending in /), the filename is stripped off.\nbase \u2013 Path used to absolutize relative search paths.\nDefaults to base which defaults to os.getcwd().\nindex \u2013 Position within the list of search paths. Defaults\nto last index (appends to the list).\n\n\n\n\n\nThe base parameter makes it easy to reference files installed\nalong with a python module or package:\nres.add_path('./resources/', __file__)\n\n\n"},
{"name": "ResourceManager.lookup", "args": ["name"], "description": "Search for a resource and return an absolute file path, or None.\nThe path list is searched in order. The first match is\nreturend. Symlinks are followed. The result is cached to speed up\nfuture lookups.\n"},
{"name": "ResourceManager.open", "args": ["name", "mode='r'", "*args", "**kwargs"], "description": "Find a resource and return a file object, or raise IOError.\n"},
{"name": "ResourceManager.path", "args": null, "description": "A list of search paths. See add_path() for details.\n"},
{"name": "ResourceManager.cache", "args": null, "description": "A cache for resolved paths. res.cache.clear() clears the cache.\n"},
{"name": "FileUpload", "args": ["fileobj", "name", "filename", "headers=None"], "description": ""},
{"name": "FileUpload.get_header", "args": ["name", "default=None"], "description": "Return the value of a header within the mulripart part.\n"},
{"name": "FileUpload.save", "args": ["destination", "overwrite=False", "chunk_size=65536", "destination"], "description": "Save file to disk or copy its content to an open file(-like) object.\nIf destination is a directory, filename is added to the\npath. Existing files are not overwritten by default (IOError).\n\n\n\n\nParameters:\ndestination \u2013 File path, directory or file(-like) object.\noverwrite \u2013 If True, replace existing files. (default: False)\nchunk_size \u2013 Bytes to read at a time. (default: 64kb)\n\n\n\n\n\n"},
{"name": "FileUpload.file", "args": null, "description": "Open file(-like) object (BytesIO buffer or temporary file)\n"},
{"name": "FileUpload.name", "args": null, "description": "Name of the upload form field\n"},
{"name": "FileUpload.raw_filename", "args": null, "description": "Raw filename as sent by the client (may contain unsafe characters)\n"},
{"name": "FileUpload.headers", "args": null, "description": "A HeaderDict with additional headers (e.g. content-type)\n"},
{"name": "FileUpload.content_type", "args": null, "description": "Current value of the \u2018Content-Type\u2019 header.\n"},
{"name": "FileUpload.content_length", "args": null, "description": "Current value of the \u2018Content-Length\u2019 header.\n"},
{"name": "FileUpload.filename", "args": null, "description": "Name of the file on the client file system, but normalized to ensure\nfile system compatibility. An empty filename is returned as \u2018empty\u2019.\nOnly ASCII letters, digits, dashes, underscores and dots are\nallowed in the final filename. Accents are removed, if possible.\nWhitespace is replaced by a single dash. Leading or tailing dots\nor dashes are removed. The filename is limited to 255 characters.\n"},
{"name": "Bottle", "args": ["**kwargs"], "description": "Each Bottle object represents a single, distinct web application and\nconsists of routes, callbacks, plugins, resources and configuration.\nInstances are callable WSGI applications.\n\n\nParameters:catchall \u2013 If true (default), handle all exceptions. Turn off to\nlet debugging middleware handle exceptions."},
{"name": "Bottle.add_hook", "args": ["name", "func"], "description": "Attach a callback to a hook. Three hooks are currently implemented:\n\nbefore_request\nExecuted once before each request. The request context is\navailable, but no routing has happened yet.\nafter_request\nExecuted once after each request regardless of its outcome.\napp_reset\nCalled whenever Bottle.reset() is called.\n\n"},
{"name": "Bottle.remove_hook", "args": ["name", "func"], "description": "Remove a callback from a hook.\n"},
{"name": "Bottle.trigger_hook", "args": ["_Bottle__name", "*args", "**kwargs"], "description": "Trigger a hook and return a list of results.\n"},
{"name": "Bottle.hook", "args": ["name"], "description": "Return a decorator that attaches a callback to a hook. See\nadd_hook() for details.\n"},
{"name": "Bottle.mount", "args": ["prefix", "app", "**options"], "description": "Mount an application (Bottle or plain WSGI) to a specific\nURL prefix. Example:\nparent_app.mount('/prefix/', child_app)\n\n\n\n\n\n\nParameters:\nprefix \u2013 path prefix or mount-point.\napp \u2013 an instance of Bottle or a WSGI application.\n\n\n\n\n\nPlugins from the parent application are not applied to the routes\nof the mounted child application. If you need plugins in the child\napplication, install them separately.\nWhile it is possible to use path wildcards within the prefix path\n(Bottle childs only), it is highly discouraged.\nThe prefix path must end with a slash. If you want to access the\nroot of the child application via /prefix in addition to\n/prefix/, consider adding a route with a 307 redirect to the\nparent application.\n"},
{"name": "Bottle.merge", "args": ["routes"], "description": "Merge the routes of another Bottle application or a list of\nRoute objects into this application. The routes keep their\n\u2018owner\u2019, meaning that the Route.app attribute is not\nchanged.\n"},
{"name": "Bottle.install", "args": ["plugin"], "description": "Add a plugin to the list of plugins and prepare it for being\napplied to all routes of this application. A plugin may be a simple\ndecorator or an object that implements the Plugin API.\n"},
{"name": "Bottle.uninstall", "args": ["plugin"], "description": "Uninstall plugins. Pass an instance to remove a specific plugin, a type\nobject to remove all plugins that match that type, a string to remove\nall plugins with a matching name attribute or True to remove all\nplugins. Return the list of removed plugins.\n"},
{"name": "Bottle.reset", "args": ["route=None"], "description": "Reset all routes (force plugins to be re-applied) and clear all\ncaches. If an ID or route object is given, only that specific route\nis affected.\n"},
{"name": "Bottle.close", "args": [], "description": "Close the application and all installed plugins.\n"},
{"name": "Bottle.run", "args": ["**kwargs"], "description": "Calls run() with the same parameters.\n"},
{"name": "Bottle.match", "args": ["environ"], "description": "Search for a matching route and return a (Route , urlargs)\ntuple. The second value is a dictionary with parameters extracted\nfrom the URL. Raise HTTPError (404/405) on a non-match.\n"},
{"name": "Bottle.get_url", "args": ["routename", "**kargs"], "description": "Return a string that matches a named route\n"},
{"name": "Bottle.add_route", "args": ["route"], "description": "Add a route object, but do not change the Route.app\nattribute.\n"},
{"name": "Bottle.route", "args": ["path=None", "method='GET'", "callback=None", "name=None", "apply=None", "skip=None", "**config"], "description": "A decorator to bind a function to a request URL. Example:\n@app.route('/hello/<name>')\ndef hello(name):\n    return 'Hello %s' % name\n\n\nThe <name> part is a wildcard. See Router for syntax\ndetails.\n\n\n\n\nParameters:\npath \u2013 Request path or a list of paths to listen to. If no\npath is specified, it is automatically generated from the\nsignature of the function.\nmethod \u2013 HTTP method (GET, POST, PUT, \u2026) or a list of\nmethods to listen to. (default: GET)\ncallback \u2013 An optional shortcut to avoid the decorator\nsyntax. route(..., callback=func) equals route(...)(func)\nname \u2013 The name for this route. (default: None)\napply \u2013 A decorator or plugin or a list of plugins. These are\napplied to the route callback in addition to installed plugins.\nskip \u2013 A list of plugins, plugin classes or names. Matching\nplugins are not installed to this route. True skips all.\n\n\n\n\n\nAny additional keyword arguments are stored as route-specific\nconfiguration and passed to plugins (see Plugin.apply()).\n"},
{"name": "Bottle.get", "args": ["path=None", "method='GET'", "**options"], "description": "Equals route().\n"},
{"name": "Bottle.post", "args": ["path=None", "method='POST'", "**options"], "description": "Equals route() with a POST method parameter.\n"},
{"name": "Bottle.put", "args": ["path=None", "method='PUT'", "**options"], "description": "Equals route() with a PUT method parameter.\n"},
{"name": "Bottle.delete", "args": ["path=None", "method='DELETE'", "**options"], "description": "Equals route() with a DELETE method parameter.\n"},
{"name": "Bottle.patch", "args": ["path=None", "method='PATCH'", "**options"], "description": "Equals route() with a PATCH method parameter.\n"},
{"name": "Bottle.error", "args": ["code=500", "callback=None"], "description": "Register an output handler for a HTTP error code. Can\nbe used as a decorator or called directly\ndef error_handler_500(error):\n    return 'error_handler_500'\n\napp.error(code=500, callback=error_handler_500)\n\n@app.error(404)\ndef error_handler_404(error):\n    return 'error_handler_404'\n\n\n"},
{"name": "Bottle.wsgi", "args": ["environ", "start_response"], "description": "The bottle WSGI-interface.\n"},
{"name": "Bottle.config", "args": null, "description": "A ConfigDict for app specific configuration.\n"},
{"name": "Bottle.resources", "args": null, "description": "A ResourceManager for application files\n"},
{"name": "Bottle.catchall", "args": null, "description": "If true, most exceptions are caught and returned as HTTPError\n"},
{"name": "Route", "args": ["app", "rule", "method", "callback", "name=None", "plugins=None", "skiplist=None", "**config"], "description": "This class wraps a route callback along with route specific metadata and\nconfiguration and applies Plugins on demand. It is also responsible for\nturing an URL path rule into a regular expression usable by the Router.\n\n"},
{"name": "Route.reset", "args": [], "description": "Forget any cached values. The next time call is accessed,\nall plugins are re-applied.\n"},
{"name": "Route.prepare", "args": [], "description": "Do all on-demand work immediately (useful for debugging).\n"},
{"name": "Route.all_plugins", "args": [], "description": "Yield all Plugins affecting this route.\n"},
{"name": "Route.get_undecorated_callback", "args": [], "description": "Return the callback. If the callback is a decorated function, try to\nrecover the original function.\n"},
{"name": "Route.get_callback_args", "args": [], "description": "Return a list of argument names the callback (most likely) accepts\nas keyword arguments. If the callback is a decorated function, try\nto recover the original function before inspection.\n"},
{"name": "Route.get_config", "args": ["key", "default=None"], "description": "Lookup a config field and return its value, first checking the\nroute.config, then route.app.config.\n"},
{"name": "Route.app", "args": null, "description": "The application this route is installed to.\n"},
{"name": "Route.rule", "args": null, "description": "The path-rule string (e.g. /wiki/<page>).\n"},
{"name": "Route.method", "args": null, "description": "The HTTP method as a string (e.g. GET).\n"},
{"name": "Route.callback", "args": null, "description": "The original callback with no plugins applied. Useful for introspection.\n"},
{"name": "Route.name", "args": null, "description": "The name of the route (if specified) or None.\n"},
{"name": "Route.plugins", "args": null, "description": "A list of route-specific plugins (see Bottle.route()).\n"},
{"name": "Route.skiplist", "args": null, "description": "A list of plugins to not apply to this route (see Bottle.route()).\n"},
{"name": "Route.config", "args": null, "description": "Additional keyword arguments passed to the Bottle.route()\ndecorator are stored in this dictionary. Used for route-specific\nplugin configuration and meta-data.\n"},
{"name": "Route.call", "args": null, "description": "The route callback with all plugins applied. This property is\ncreated on demand and then cached to speed up subsequent requests.\n"},
{"name": "BaseRequest", "args": ["environ=None"], "description": "A wrapper for WSGI environment dictionaries that adds a lot of\nconvenient access methods and properties. Most of them are read-only.\n\nAdding new attributes to a request actually adds them to the environ\ndictionary (as \u2018bottle.request.ext.<name>\u2019). This is the recommended\nway to store and access request-specific data.\n\n"},
{"name": "BaseRequest.get_header", "args": ["name", "default=None"], "description": "Return the value of a request header, or a given default value.\n"},
{"name": "BaseRequest.get_cookie", "args": ["key", "default=None", "secret=None", "digestmod=&lt;built-in function openssl_sha256&gt;"], "description": "Return the content of a cookie. To read a Signed Cookie, the\nsecret must match the one used to create the cookie (see\nBaseResponse.set_cookie()). If anything goes wrong (missing\ncookie or wrong signature), return a default value.\n"},
{"name": "BaseRequest.path_shift", "args": ["shift=1"], "description": "\nShift path segments from path to script_name and\nvice versa.\n\n\n\n\n\nParameters:shift \u2013 The number of path segments to shift. May be negative\nto change the shift direction. (default: 1)\n\n\n\n"},
{"name": "BaseRequest.copy", "args": [], "description": "Return a new Request with a shallow environ copy.\n"},
{"name": "BaseRequest.MEMFILE_MAX", "args": null, "description": "Maximum size of memory buffer for body in bytes.\n"},
{"name": "BaseRequest.environ", "args": null, "description": "The wrapped WSGI environ dictionary. This is the only real attribute.\nAll other attributes actually are read-only properties.\n"},
{"name": "BaseRequest.app", "args": null, "description": "Bottle application handling this request.\n"},
{"name": "BaseRequest.route", "args": null, "description": "The bottle Route object that matches this request.\n"},
{"name": "BaseRequest.url_args", "args": null, "description": "The arguments extracted from the URL.\n"},
{"name": "BaseRequest.path", "args": null, "description": "The value of PATH_INFO with exactly one prefixed slash (to fix\nbroken clients and avoid the \u201cempty path\u201d edge case).\n"},
{"name": "BaseRequest.method", "args": null, "description": "The REQUEST_METHOD value as an uppercase string.\n"},
{"name": "BaseRequest.headers", "args": null, "description": "A WSGIHeaderDict that provides case-insensitive access to\nHTTP request headers.\n"},
{"name": "BaseRequest.cookies", "args": null, "description": "Cookies parsed into a FormsDict. Signed cookies are NOT\ndecoded. Use get_cookie() if you expect signed cookies.\n"},
{"name": "BaseRequest.query", "args": null, "description": "The query_string parsed into a FormsDict. These\nvalues are sometimes called \u201cURL arguments\u201d or \u201cGET parameters\u201d, but\nnot to be confused with \u201cURL wildcards\u201d as they are provided by the\nRouter.\n"},
{"name": "BaseRequest.forms", "args": null, "description": "Form values parsed from an url-encoded or multipart/form-data\nencoded POST or PUT request body. The result is returned as a\nFormsDict. All keys and values are strings. File uploads\nare stored separately in files.\n"},
{"name": "BaseRequest.params", "args": null, "description": "A FormsDict with the combined values of query and\nforms. File uploads are stored in files.\n"},
{"name": "BaseRequest.files", "args": null, "description": "File uploads parsed from multipart/form-data encoded POST or PUT\nrequest body. The values are instances of FileUpload.\n"},
{"name": "BaseRequest.json", "args": null, "description": "If the Content-Type header is application/json or\napplication/json-rpc, this property holds the parsed content\nof the request body. Only requests smaller than MEMFILE_MAX\nare processed to avoid memory exhaustion.\nInvalid JSON raises a 400 error response.\n"},
{"name": "BaseRequest.body", "args": null, "description": "The HTTP request body as a seek-able file-like object. Depending on\nMEMFILE_MAX, this is either a temporary file or a\nio.BytesIO instance. Accessing this property for the first\ntime reads and replaces the wsgi.input environ variable.\nSubsequent accesses just do a seek(0) on the file object.\n"},
{"name": "BaseRequest.chunked", "args": null, "description": "True if Chunked transfer encoding was.\n"},
{"name": "BaseRequest.GET", "args": null, "description": "An alias for query.\n"},
{"name": "BaseRequest.POST", "args": null, "description": "The values of forms and files combined into a single\nFormsDict. Values are either strings (form values) or\ninstances of cgi.FieldStorage (file uploads).\n"},
{"name": "BaseRequest.url", "args": null, "description": "The full request URI including hostname and scheme. If your app\nlives behind a reverse proxy or load balancer and you get confusing\nresults, make sure that the X-Forwarded-Host header is set\ncorrectly.\n"},
{"name": "BaseRequest.urlparts", "args": null, "description": "The url string as an urlparse.SplitResult tuple.\nThe tuple contains (scheme, host, path, query_string and fragment),\nbut the fragment is always empty because it is not visible to the\nserver.\n"},
{"name": "BaseRequest.fullpath", "args": null, "description": "Request path including script_name (if present).\n"},
{"name": "BaseRequest.query_string", "args": null, "description": "The raw query part of the URL (everything in between ?\nand #) as a string.\n"},
{"name": "BaseRequest.script_name", "args": null, "description": "The initial portion of the URL\u2019s path that was removed by a higher\nlevel (server or routing middleware) before the application was\ncalled. This script path is returned with leading and tailing\nslashes.\n"},
{"name": "BaseRequest.content_length", "args": null, "description": "The request body length as an integer. The client is responsible to\nset this header. Otherwise, the real length of the body is unknown\nand -1 is returned. In this case, body will be empty.\n"},
{"name": "BaseRequest.content_type", "args": null, "description": "The Content-Type header as a lowercase-string (default: empty).\n"},
{"name": "BaseRequest.is_xhr", "args": null, "description": "True if the request was triggered by a XMLHttpRequest. This only\nworks with JavaScript libraries that support the X-Requested-With\nheader (most of the popular libraries do).\n"},
{"name": "BaseRequest.is_ajax", "args": null, "description": "Alias for is_xhr. \u201cAjax\u201d is not the right term.\n"},
{"name": "BaseRequest.auth", "args": null, "description": "HTTP authentication data as a (user, password) tuple. This\nimplementation currently supports basic (not digest) authentication\nonly. If the authentication happened at a higher level (e.g. in the\nfront web-server or a middleware), the password field is None, but\nthe user field is looked up from the REMOTE_USER environ\nvariable. On any errors, None is returned.\n"},
{"name": "BaseRequest.remote_route", "args": null, "description": "A list of all IPs that were involved in this request, starting with\nthe client IP and followed by zero or more proxies. This does only\nwork if all proxies support the `X-Forwarded-For header. Note\nthat this information can be forged by malicious clients.\n"},
{"name": "BaseRequest.remote_addr", "args": null, "description": "The client IP as a string. Note that this information can be forged\nby malicious clients.\n"},
{"name": "LocalRequest", "args": ["environ=None"], "description": "A thread-local subclass of BaseRequest with a different\nset of attributes for each thread. There is usually only one global\ninstance of this class (request). If accessed during a\nrequest/response cycle, this instance always refers to the current\nrequest (even on a multithreaded server).\n\n"},
{"name": "LocalRequest.bind", "args": ["environ=None"], "description": "Wrap a WSGI environ dictionary.\n"},
{"name": "LocalRequest.environ", "args": null, "description": "Thread-local property\n"},
{"name": "BaseResponse", "args": ["body=''", "status=None", "headers=None", "**more_headers"], "description": "Storage class for a response body as well as headers and cookies.\n\nThis class does support dict-like case-insensitive item-access to\nheaders, but is NOT a dict. Most notably, iterating over a response\nyields parts of the body and not the headers.\n\n\nParameters:\nbody \u2013 The response body as one of the supported types.\nstatus \u2013 Either an HTTP status code (e.g. 200) or a status line\nincluding the reason phrase (e.g. \u2018200 OK\u2019).\nheaders \u2013 A dictionary or a list of name-value pairs."},
{"name": "BaseResponse.copy", "args": ["cls=None"], "description": "Returns a copy of self.\n"},
{"name": "BaseResponse.get_header", "args": ["name", "default=None"], "description": "Return the value of a previously defined header. If there is no\nheader with that name, return a default value.\n"},
{"name": "BaseResponse.set_header", "args": ["name", "value"], "description": "Create a new response header, replacing any previously defined\nheaders with the same name.\n"},
{"name": "BaseResponse.add_header", "args": ["name", "value"], "description": "Add an additional response header, not removing duplicates.\n"},
{"name": "BaseResponse.iter_headers", "args": [], "description": "Yield (header, value) tuples, skipping headers that are not\nallowed with the current response status code.\n"},
{"name": "BaseResponse.set_cookie", "args": ["name", "value", "secret=None", "digestmod=&lt;built-in function openssl_sha256&gt;", "**options"], "description": "Create a new cookie or replace an old one. If the secret parameter is\nset, create a Signed Cookie (described below).\n\n\n\n\nParameters:\nname \u2013 the name of the cookie.\nvalue \u2013 the value of the cookie.\nsecret \u2013 a signature key required for signed cookies.\n\n\n\n\n\nAdditionally, this method accepts all RFC 2109 attributes that are\nsupported by cookie.Morsel, including:\n\n\n\n\nParameters:\nmaxage \u2013 maximum age in seconds. (default: None)\nexpires \u2013 a datetime object or UNIX timestamp. (default: None)\ndomain \u2013 the domain that is allowed to read the cookie.\n(default: current domain)\npath \u2013 limits the cookie to a given path (default: current path)\nsecure \u2013 limit the cookie to HTTPS connections (default: off).\nhttponly \u2013 prevents client-side javascript to read this cookie\n(default: off, requires Python 2.6 or newer).\nsamesite \u2013 disables third-party use for a cookie.\nAllowed attributes: lax and strict.\nIn strict mode the cookie will never be sent.\nIn lax mode the cookie is only sent with a top-level GET request.\n\n\n\n\n\nIf neither expires nor maxage is set (default), the cookie will\nexpire at the end of the browser session (as soon as the browser\nwindow is closed).\nSigned cookies may store any pickle-able object and are\ncryptographically signed to prevent manipulation. Keep in mind that\ncookies are limited to 4kb in most browsers.\nWarning: Pickle is a potentially dangerous format. If an attacker\ngains access to the secret key, he could forge cookies that execute\ncode on server side if unpickeld. Using pickle is discouraged and\nsupport for it will be removed in later versions of bottle.\nWarning: Signed cookies are not encrypted (the client can still see\nthe content) and not copy-protected (the client can restore an old\ncookie). The main intention is to make pickling and unpickling\nsave, not to store secret information at client side.\n"},
{"name": "BaseResponse.delete_cookie", "args": ["key", "**kwargs"], "description": "Delete a cookie. Be sure to use the same domain and path\nsettings as used to create the cookie.\n"},
{"name": "BaseResponse.status_line", "args": null, "description": "The HTTP status line as a string (e.g. 404 Not Found).\n"},
{"name": "BaseResponse.status_code", "args": null, "description": "The HTTP status code as an integer (e.g. 404).\n"},
{"name": "BaseResponse.status", "args": null, "description": "A writeable property to change the HTTP response status. It accepts\neither a numeric code (100-999) or a string with a custom reason\nphrase (e.g. \u201c404 Brain not found\u201d). Both status_line and\nstatus_code are updated accordingly. The return value is\nalways a status string.\n"},
{"name": "BaseResponse.headers", "args": null, "description": "An instance of HeaderDict, a case-insensitive dict-like\nview on the response headers.\n"},
{"name": "BaseResponse.headerlist", "args": null, "description": "WSGI conform list of (header, value) tuples.\n"},
{"name": "BaseResponse.content_type", "args": null, "description": "Current value of the \u2018Content-Type\u2019 header.\n"},
{"name": "BaseResponse.content_length", "args": null, "description": "Current value of the \u2018Content-Length\u2019 header.\n"},
{"name": "BaseResponse.expires", "args": null, "description": "Current value of the \u2018Expires\u2019 header.\n"},
{"name": "BaseResponse.charset", "args": null, "description": "Return the charset specified in the content-type header (default: utf8).\n"},
{"name": "LocalResponse", "args": ["body=''", "status=None", "headers=None", "**more_headers"], "description": "A thread-local subclass of BaseResponse with a different\nset of attributes for each thread. There is usually only one global\ninstance of this class (response). Its attributes are used\nto build the HTTP response at the end of the request/response cycle.\n\n"},
{"name": "LocalResponse.body", "args": null, "description": "Thread-local property\n"},
{"name": "BaseTemplate", "args": ["source=None", "name=None", "lookup=None", "encoding='utf8'", "**settings"], "description": "Base class and minimal API for template adapters\n\n"}
]